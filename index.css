*,
*:before,
*:after {
  /* this makes sure that the width of the border is included in the width of the element. this helps solve the problem of the width of the border being added to the width of the element which can cause problems with the layout of the page, margin and padding are also included in this*/
  box-sizing: border-box;
}

/*  // :root is the root element of the document, it is the html element, we can use this to set css variables, css variables are variables that we can use in css, we can use this to set the color of the logo and the background gradient */
:root {
  --primary-color: #2d7dff;
}

body {
  /* this is the background gradient for the page, the convenient way to genetrate gradient is cssgradient.io */
  background: linear-gradient(
    220deg,
    rgba(189, 0, 255, 1) 0%,
    rgba(0, 163, 255, 1) 100%
  );
  /* set 100vh because we want the gradient to cover the whole page, there may be repeated gradients if the page is longer than the viewport, but we can fix that with background-attachment: fixed */
  height: 100vh;
  /* set fixed so that the gradient doesn't move when we scroll, this is to prevent repeated gradients */
  background-attachment: fixed;
  font-family: 'Poppins';
}

.container {
  /* set margin to 1em on the top and bottom and 0.5em on the left and right */
  margin: 1em 0.5em;
  /* set height to 100% - 2em because we want the container to be 100% of the height of the page minus the margin */
  height: calc(100% - 2em);
  display: flex;
}

section {
  background: #221f26 url('./bg.jpg');
  /* cover makes sure that the background image covers the whole section */
  background-size: cover;
  height: 100%;
  /* // this is to make the background image blend with the background color */
  background-blend-mode: screen;
  /* // this is to move the background image to the left */
  background-position: -100px;
  padding: 2em;
  border-radius: 13px;
  /* // this is to make sure that the section takes up the whole width of the page */
  flex: 1;
}

nav {
  /* display: none; */
  /* // this is to make sure that the nav bar is fixed to the top of the page, if we don't set this, the nav bar will be at the top of the page when we scroll down */
  position: fixed;
  /* // this is to make sure that the nav bar is on top of the other elements */
  z-index: 1;
  background: #2c2931;
  left: 0;
  top: 0;
  height: 100vh;
  max-width: 300px;
}

.logo {
  /* // --primary-color is a css variable, we can use this to change the color of the logo */
  color: var(--primary-color);
  font-weight: 800;
  text-transform: uppercase;
  font-size: 1.5rem;
  /* // -0.1em means that the letters are closer together */
  letter-spacing: -0.1em;
  text-align: center;
  width: 100%;
  margin: 0;
}

header {
  display: flex;
}

.menu-btn {
  /* // this is to change the cursor to a pointer when we hover over the menu button */
  cursor: pointer;
}

h1 {
  /* // this is the fallback in case the clamp function doesn't work for older browsers */
  font-size: 3rem;
  /*  // to create fliud typography. clamp is a css function that takes 3 parameters, the first parameter is the minimum value, the second parameter is the value that is used when the viewport is at its smallest, the third parameter is the maximum value, this is to make sure that the font size is responsive. -0.875rem + 8.333vw is the formula to calculate the font size, we can use this formula to calculate the font size for different viewports */
  font-size: clamp(2.5rem, -0.875rem + 8.333vw, 4rem);
  font-weight: 800;
  text-transform: uppercase;
  color: white;
  line-height: 89%;
}

.cv {
  /* // this is to make the cv section a grid, this is so that we can center the cv section, we can also use flexbox to center the cv section */
  display: grid;
  place-items: center;
  /* // setting to 80% not 100% because we want to leave some space at the bottom */
  height: 80%;
}

.content p {
  font-size: 2.1rem;
  font-size: clamp(2rem, -0.875rem + 8.333vw, 3rem);
  font-weight: 300;
  line-height: 111%;
  color: #847d93;
  margin-top: 1.1em;
}

.cta {
  text-decoration: none;
  color: white;
  text-transform: uppercase;
  font-weight: bold;
  margin-top: 2.875em;
  /* // inline-block will make the button take the width of the content, if we use block, the button will take the whole width of the page */
  display: inline-block;
  border: 1px solid #4d4d4d;
  /* // calc is used to make sure that the padding on the left will have some room for a svg arrow icon // account for icon which is 1.5 em and padding which is 1.25em on the left and right*/
  padding: 1.25em 1.25em 1.25em calc(2.5em + 1.5em);
  position: relative;
}

/*   // :before is a pseudo element, this is to add a svg arrow icon to the button, we can also use an image for this, but using svg is better because we can change the color of the svg icon. In CSS, ::before creates a pseudo-element that is the first child of the selected element. It is often used to add cosmetic content to an element with the content property. It is inline by default. The ::before selector inserts something before the content of each selected element(s). */
.cta:before {
  /* // set to empty string because we don't want to add any content, we just want to add the svg icon */
  content: '';
  /* // this is to make sure that the svg icon is positioned relative to the button, if we don't set this, the svg icon will be positioned relative to the page */
  position: absolute;
  background: url('arrow.svg') no-repeat;
  width: 1.5em;
  height: 1.5em;
  left: 1.25em;
}

.cta:hover {
  /* // set the background color to the primary color when we hover over the button */
  background: var(--primary-color);
}

nav {
  /* // this will make nav hidden */
  transform: translateX(-100%);
  transition: transform 0.3s;
}

nav ul {
  list-style-type: none;
  padding: 0;
  width: 100%;
}

nav ul li {
  /* // this is to make sure that the list items take the whole width of the nav bar */
  width: 100%;
}

nav ul li a {
  text-decoration: none;
  color: white;
  /* // this will allow us to set the padding and width of the list items */
  display: block;
  padding: 0.875em 5em 0.875em 4em;
}

nav ul li a:hover {
  background: #413e47;
}

.back-btn {
  /* // this is to flip the arrow icon, scaleX(-1) will flip the icon horizontally, scaleY(-1) will flip the icon vertically */
  transform: scaleX(-1);
  /* // padding for the top, right/left and bottom */
  padding: 3em 4em 2em;
  cursor: pointer;
  /* // add a transition to the transform property, this is so that the icon will rotate when we hover over the icon, */
  transition: transform 0.3s;
}

.back-btn:hover {
  /* //add some interactions, this will add flip and move icon to the left a bit  */
  transform: scaleX(-1) translateX(6px);
}

/* // this is to change the background color of the active link */
.active {
  background: var(--primary-color);
}

.active:hover {
  /* // add a slighly lighter color when hovering */
  background: #4497ff;
}

@media only screen and (min-width: 700px) {
  .left-col {
    /* // this is to make the left column a flexbox, */
    display: flex;
  }

  .content p {
    width: 70%;
  }
}

/* // add media query to make responsive for desktop */
@media only screen and (min-width: 1000px) {
  nav {
    /* // unset will remove the position property */
    position: unset;
    /* // translateX(0) will move the nav bar to the right, this is so that the nav bar will be visible on desktop */
    /* // adding !important will override the transform property important is in case there is js that is adding the transform property which will override the transform property that we set here*/
    transform: translateX(0) !important;
    border-radius: unset;
    border-top-left-radius: 13px;
    border-bottom-left-radius: 13px;
    height: 100%;
  }
  /* menu button no longer needed on desktop version */
  .menu-btn,
  .back-btn {
    display: none;
  }

  ul {
    margin-top: 4em;
  }

  header {
    padding: 1.6em;
  }

  /* let menu float to left side of section content */
  .container {
    display: flex;
    padding: 2em;
  }
  .logo {
    text-align: left;
  }

  section {
    border-radius: unset;
    border-top-right-radius: 13px;
    border-bottom-right-radius: 13px;
    width: 100%;
    background-size: cover;
    background-position: 0;
    background-attachment: unset;
  }
  .content {
    /* // justify-self is used to align the content to the left, it is used to align the content inside the grid item */
    justify-self: left;
    margin-left: 4em;
  }
}
